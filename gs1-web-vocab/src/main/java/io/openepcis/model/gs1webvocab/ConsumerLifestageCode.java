//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package io.openepcis.model.gs1webvocab;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;

/**
 * Java class for ConsumerLifestageCode.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <simpleType name="ConsumerLifestageCode">
 *   <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     <enumeration value="ADULT"/>
 *     <enumeration value="ALL_AGES"/>
 *     <enumeration value="BABY_INFANT"/>
 *     <enumeration value="CHILD_1_To_2_YEARS"/>
 *     <enumeration value="CHILD_2_YEARS_ONWARDS"/>
 *     <enumeration value="UNCLASSIFIED"/>
 *     <enumeration value="UNIDENTIFIED"/>
 *   </restriction>
 * </simpleType>
 * }</pre>
 */
@XmlType(name = "ConsumerLifestageCode")
@XmlEnum
public enum ConsumerLifestageCode {
  ADULT("ADULT"),
  ALL_AGES("ALL_AGES"),
  BABY_INFANT("BABY_INFANT"),
  @XmlEnumValue("CHILD_1_To_2_YEARS")
  CHILD_1_TO_2_YEARS("CHILD_1_To_2_YEARS"),
  CHILD_2_YEARS_ONWARDS("CHILD_2_YEARS_ONWARDS"),
  UNCLASSIFIED("UNCLASSIFIED"),
  UNIDENTIFIED("UNIDENTIFIED");
  private final String value;

  ConsumerLifestageCode(String v) {
    value = v;
  }

  /**
   * Gets the value associated to the enum constant.
   *
   * @return The value linked to the enum.
   */
  public String value() {
    return value;
  }

  /**
   * Gets the enum associated to the value passed as parameter.
   *
   * @param v The value to get the enum from.
   * @return The enum which corresponds to the value, if it exists.
   * @throws IllegalArgumentException If no value matches in the enum declaration.
   */
  public static ConsumerLifestageCode fromValue(String v) {
    for (ConsumerLifestageCode c : ConsumerLifestageCode.values()) {
      if (c.value.equals(v)) {
        return c;
      }
    }
    throw new IllegalArgumentException(v);
  }
}
